function analysis_example_Freq_rc_oz(varargin)
%% Example script to call rcaSweep on a dataset
% Copyright 2019 Alexandra Yakovleva Stanford University SVNDL

    [curr_path, ~, ~] = fileparts(mfilename('fullpath'));
    path.rootFolder = curr_path;
    srcEEGDir = 'YOUR_EEG_DATA_DIR';
    experiment = 'YOUR_EXPERIMENT';
    group = 'Students';
    domain = 'freq';
    
    path.results = fullfile(path.rootFolder, srcEEGDir, experiment, group, 'results');    
    path.srcEEG = fullfile(path.rootFolder, srcEEGDir, experiment, group);
    path.loadedEEG = fullfile(path.rootFolder, srcEEGDir, experiment, group, 'MAT');
    
    plotString = [experiment '_' group '_' domain '_'];

    if (isempty(varargin))
        saveDir = fullfile(srcEEGDir, experiment, group, 'results', 'Figures');        
    else
        saveDir = varargin{1};
    end
    path.results_Figures = fullfile(path.rootFolder, saveDir);    
    
    
    %% reading subsets of data
    
    
    settings_f2.useFrequencies = {'1F2', '2F2'};
    settings_f2.subjTag = 'nl'; 
    settings_f1.useFrequencies = {'1F1', '2F1', '3F1', '4F1'};
    settings_f1.subjTag = 'nl';
   
    %% create dirs
    if (~exist(path.loadedEEG, 'dir'))
        mkdir(path.loadedEEG);
    end
    
    if (~exist(path.results_Figures, 'dir'))
        mkdir(path.results_Figures);
    end
    
    [~, sensorData_f2, cellNoiseData1_f2, cellNoiseData2_f2, info_f2] = readselectiveDFTData(path.srcEEG, settings_f2);        
    [~, sensorData_f1, cellNoiseData1_f1, cellNoiseData2_f1, info_f1] = readselectiveDFTData(path.srcEEG, settings_f1);    
    
    
    f1_hz = 1;
    f2_hz = 6;
    
    info.Channels(1) = 75;    
    
    %% package some of the necessary variables for plotting/grouping data later on
    rcaSettings.freqIndices = freqInd;
    rcaSettings.binIndices = binInd;
    rcaSettings.binsToUse = 0;
    rcaSettings.freqsToUse = [1 2 3 4];
    rcaSettings.condsToUse = 1;
    rcaSettings.trialsToUse = [];
    rcaSettings.nReg = 7;
    rcaSettings.nComp = 3;
    rcaSettings.chanToCompare = info.Channels(1);
    rcaSettings.freqLabels = freqLabels;
    rcaSettings.computeComparison = 0;
    rcaSettings.binLevels = binLabels;
    rcaSettings.dataType = 'RLS';
    rcaSettings.rcPlotStyle =  'matchMaxSignsToRc1';
    runDate = datestr(clock,26);
    runDate(strfind(runDate,'/')) ='';
    rcaSettings.runDate = runDate;
    
    rcaSettings_c1 = rcaSettings;
    rcaSettings_c1.savedFile = [path.results filesep 'rcaResults_Frequency_c1.mat'];
    rcaSettings_c1.chanToCompare = info.Channels(1);
    
    rcaSettings_c5 = rcaSettings;
    rcaSettings_c5.savedFile = [path.results filesep 'rcaResults_Frequency_c5.mat'];
    
    c1Data = sensorData_f1(:, 1)';
    c5Data = sensorData_f1(:, 5)';
    
    rcaStrct_c1 = rcaRun_frequency(c1Data, cellNoiseData1(:, 1)', cellNoiseData2(:, 1)', rcaSettings_c1);   
    rcaStrct_c5 = rcaRun_frequency(c5Data, cellNoiseData1(:, 5)', cellNoiseData2(:, 5)', rcaSettings_c5);   
   
    %% avg amplitude and phase
    W_OZ = zeros(128, 1);
    W_OZ(75, 1) = 1;
    
    W_c1 = cat(2, (rcaStrct_c1.W(:, 1)), W_OZ);
    W_c5 = cat(2, (rcaStrct_c5.W(:, 1)), W_OZ);
    
    groupLabels = {'Condition1', 'Condition5'};
    
    % average projected data      
    [proj_c1, ~] = averageFrequencyData(c1Data, 10, 4, W_c1);
    [proj_c5, ~] = averageFrequencyData(c5Data, 10, 4, W_c5);   
    
   %% plot group data
    [groupsBars, groupsLolli] = plotGroups_freq(info.frequency, groupLabels, proj_c1, proj_c5);
    
end



